; ***************************************************************
; * Eigen Visualizer
; *
; * Author: Hauke Heibel <hauke.heibel@gmail.com>
; *
; * Support the enhanced debugging of the following Eigen
; * types (*: any, +:fixed dimension) :
; *
; * - Eigen::Matrix<*,4,1,*,*,*> and Eigen::Matrix<*,1,4,*,*,*>
; * - Eigen::Matrix<*,3,1,*,*,*> and Eigen::Matrix<*,1,3,*,*,*>
; * - Eigen::Matrix<*,2,1,*,*,*> and Eigen::Matrix<*,1,2,*,*,*>
; * - Eigen::Matrix<*,-1,-1,*,*,*>
; * - Eigen::Matrix<*,+,-1,*,*,*>
; * - Eigen::Matrix<*,-1,+,*,*,*>
; * - Eigen::Matrix<*,+,+,*,*,*>
; *
; * Matrices are displayed properly independantly of the memory
; * alignment (RowMajor vs. ColMajor).
; *
; * This file is distributed WITHOUT ANY WARRANTY. Please ensure
; * that your original autoexp.dat file is copied to a safe 
; * place before proceeding with its modification.
; ***************************************************************

[Visualizer]

; Fixed size 4-vectors
Eigen::Matrix<*,4,1,*,*,*>|Eigen::Matrix<*,1,4,*,*,*>{
   children
   (
      #(
        [internals]: [$rotation_r,!],
         x : ($rotation_r.m_storage.m_data.array)[0],
         y : ($rotation_r.m_storage.m_data.array)[1],
         z : ($rotation_r.m_storage.m_data.array)[2],
         w : ($rotation_r.m_storage.m_data.array)[3]
      )
   )

   preview
   (
      #(
        "[",
        4,
        "](",
        #array(expr: $extent_e.m_storage.m_data.array[$i], size: 4),
        ")"
      )
   )
}

; Fixed size 3-vectors
Eigen::Matrix<*,3,1,*,*,*>|Eigen::Matrix<*,1,3,*,*,*>{
   children
   (
      #(
        [internals]: [$rotation_r,!],
         x : ($rotation_r.m_storage.m_data.array)[0],
         y : ($rotation_r.m_storage.m_data.array)[1],
         z : ($rotation_r.m_storage.m_data.array)[2]
      )
   )

   preview
   (
      #(
        "[",
        3,
        "](",
        #array(expr: $extent_e.m_storage.m_data.array[$i], size: 3),
        ")"
      )
   )
}

; Fixed size 2-vectors
Eigen::Matrix<*,2,1,*,*,*>|Eigen::Matrix<*,1,2,*,*,*>{
   children
   (
      #(
        [internals]: [$rotation_r,!],
         x : ($rotation_r.m_storage.m_data.array)[0],
         y : ($rotation_r.m_storage.m_data.array)[1]
      )
   )

   preview
   (
      #(
        "[",
        2,
        "](",
        #array(expr: $extent_e.m_storage.m_data.array[$i], size: 2),
        ")"
      )
   )
}

; Fixed size 1-vectors
Eigen::Matrix<*,1,1,*,*,*>|Eigen::Matrix<*,1,1,*,*,*>{
   children
   (
      #(
        [internals]: [$rotation_r,!],
         x : ($rotation_r.m_storage.m_data.array)[0]
      )
   )

   preview
   (
      #(
        "[",
        1,
        "](",
        #array(expr: $extent_e.m_storage.m_data.array[$i], size: 1),
        ")"
      )
   )
}

; Dynamic matrices (ColMajor and RowMajor support)
Eigen::Matrix<*,-1,-1,*,*,*>{
  children
   (
      #(
         [internals]: [$rotation_r,!],
         rows: $rotation_r.m_storage.m_rows,
         cols: $rotation_r.m_storage.m_cols,
         ; Check for RowMajorBit
         #if ($rotation_r.Flags & 0x1) (
             #array(
                rank: 2,
                base: 0,
                expr: ($rotation_r.m_storage.m_data)[($i % $rotation_r.m_storage.m_rows)*$rotation_r.m_storage.m_cols + (($i- $i % $rotation_r.m_storage.m_rows)/$rotation_r.m_storage.m_rows)],
                size: ($r==1)*$rotation_r.m_storage.m_rows+($r==0)*$rotation_r.m_storage.m_cols
             )
         ) #else (
             #array(
                rank: 2,
                base: 0,
                expr: ($rotation_r.m_storage.m_data)[$i],
                size: ($r==1)*$rotation_r.m_storage.m_rows+($r==0)*$rotation_r.m_storage.m_cols
             )
         )
      )
   )

   preview
   (
     #(
         "[",
           $rotation_r.m_storage.m_rows,
         ",",
           $rotation_r.m_storage.m_cols,
         "](",
           #array(
            expr :    [($rotation_r.m_storage.m_data)[$i],g],
            size :    $rotation_r.m_storage.m_rows*$rotation_r.m_storage.m_cols
           ),
         ")"
      )
   )
}

; Fixed rows, dynamic columns matrix (ColMajor and RowMajor support)
Eigen::Matrix<*,*,-1,*,*,*>{
  children
   (
      #(
         [internals]: [$rotation_r,!],
         rows: $rotation_r.RowsAtCompileTime,
         cols: $rotation_r.m_storage.m_cols,
         ; Check for RowMajorBit
         #if ($rotation_r.Flags & 0x1) (
             #array(
                rank: 2,
                base: 0,
                expr: ($rotation_r.m_storage.m_data)[($i % $rotation_r.RowsAtCompileTime)*$rotation_r.m_storage.m_cols + (($i- $i % $rotation_r.RowsAtCompileTime)/$rotation_r.RowsAtCompileTime)],
                size: ($r==1)*$rotation_r.RowsAtCompileTime+($r==0)*$rotation_r.m_storage.m_cols
             )
         ) #else (
             #array(
                rank: 2,
                base: 0,
                expr: ($rotation_r.m_storage.m_data)[$i],
                size: ($r==1)*$rotation_r.RowsAtCompileTime+($r==0)*$rotation_r.m_storage.m_cols
             )
         )
      )
   )

   preview
   (
     #(
         "[",
           $rotation_r.RowsAtCompileTime,
         ",",
           $rotation_r.m_storage.m_cols,
         "](",
           #array(
            expr :    [($rotation_r.m_storage.m_data)[$i],g],
            size :    $rotation_r.RowsAtCompileTime*$rotation_r.m_storage.m_cols
           ),
         ")"
      )
   )
}

; Dynamic rows, fixed columns matrix (ColMajor and RowMajor support)
Eigen::Matrix<*,-1,*,*,*,*>{
  children
   (
      #(
         [internals]: [$rotation_r,!],
         rows: $rotation_r.m_storage.m_rows,
         cols: $rotation_r.ColsAtCompileTime,
         ; Check for RowMajorBit
         #if ($rotation_r.Flags & 0x1) (
             #array(
                rank: 2,
                base: 0,
                expr: ($rotation_r.m_storage.m_data)[($i % $rotation_r.m_storage.m_rows)*$rotation_r.ColsAtCompileTime + (($i- $i % $rotation_r.m_storage.m_rows)/$rotation_r.m_storage.m_rows)],
                size: ($r==1)*$rotation_r.m_storage.m_rows+($r==0)*$rotation_r.ColsAtCompileTime
             )
         ) #else (
             #array(
                rank: 2,
                base: 0,
                expr: ($rotation_r.m_storage.m_data)[$i],
                size: ($r==1)*$rotation_r.m_storage.m_rows+($r==0)*$rotation_r.ColsAtCompileTime
             )
         )
      )
   )

   preview
   (
     #(
         "[",
           $rotation_r.m_storage.m_rows,
         ",",
           $rotation_r.ColsAtCompileTime,
         "](",
           #array(
            expr :    [($rotation_r.m_storage.m_data)[$i],g],
            size :    $rotation_r.m_storage.m_rows*$rotation_r.ColsAtCompileTime
           ),
         ")"
      )
   )
}

; Fixed size matrix (ColMajor and RowMajor support)
Eigen::Matrix<*,*,*,*,*,*>{
  children
   (
      #(
         [internals]: [$rotation_r,!],
         rows: $rotation_r.RowsAtCompileTime,
         cols: $rotation_r.ColsAtCompileTime,
         ; Check for RowMajorBit
         #if ($rotation_r.Flags & 0x1) (
             #array(
                rank: 2,
                base: 0,
                expr: ($rotation_r.m_storage.m_data.array)[($i % $rotation_r.RowsAtCompileTime)*$rotation_r.ColsAtCompileTime + (($i- $i % $rotation_r.RowsAtCompileTime)/$rotation_r.RowsAtCompileTime)],
                size: ($r==1)*$rotation_r.RowsAtCompileTime+($r==0)*$rotation_r.ColsAtCompileTime
             )
         ) #else (
             #array(
                rank: 2,
                base: 0,
                expr: ($rotation_r.m_storage.m_data.array)[$i],
                size: ($r==1)*$rotation_r.RowsAtCompileTime+($r==0)*$rotation_r.ColsAtCompileTime
             )
         )
      )
   )

   preview
   (
     #(
         "[",
           $rotation_r.RowsAtCompileTime,
         ",",
           $rotation_r.ColsAtCompileTime,
         "](",
           #array(
            expr :    [($rotation_r.m_storage.m_data.array)[$i],g],
            size :    $rotation_r.RowsAtCompileTime*$rotation_r.ColsAtCompileTime
           ),
         ")"
      )
   )
}
